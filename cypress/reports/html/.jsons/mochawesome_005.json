{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2025-07-08T22:33:35.729Z",
    "end": "2025-07-08T22:33:39.154Z",
    "duration": 3425,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d65c436e-3966-4cf2-a28f-8b67333c850e",
      "title": "",
      "fullFile": "cypress/e2e/features/login.feature",
      "file": "cypress/e2e/features/login.feature",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "70439c31-d5b8-4309-9a4a-dc0a067414d9",
          "title": "Como usuario de la aplicación ParaBank",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login exitoso",
              "fullTitle": "Como usuario de la aplicación ParaBank login exitoso",
              "timedOut": null,
              "duration": 3408,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "[\n  {\n    \"title\": \"cypress-mochawesome-reporter-screenshots\",\n    \"value\": [\n      []\n    ]\n  },\n  {\n    \"title\": \"__cucumber_source__\",\n    \"value\": {\n      \"feature\": {\n        \"tags\": [],\n        \"location\": {\n          \"line\": 1,\n          \"column\": 1\n        },\n        \"language\": \"en\",\n        \"keyword\": \"Feature\",\n        \"name\": \"Como usuario de la aplicación ParaBank\",\n        \"description\": \"\",\n        \"children\": [\n          {\n            \"scenario\": {\n              \"id\": \"895f7835-bb3a-4171-a067-62edef7bd798\",\n              \"tags\": [\n                {\n                  \"location\": {\n                    \"line\": 3,\n                    \"column\": 3\n                  },\n                  \"name\": \"@loginExitoso\",\n                  \"id\": \"987fc9e6-b2ef-4cf6-82bd-96275580d993\"\n                }\n              ],\n              \"location\": {\n                \"line\": 4,\n                \"column\": 3\n              },\n              \"keyword\": \"Scenario\",\n              \"name\": \"login exitoso\",\n              \"description\": \"\",\n              \"steps\": [\n                {\n                  \"id\": \"66477172-9baa-4c94-83c0-25d33025d5df\",\n                  \"location\": {\n                    \"line\": 5,\n                    \"column\": 5\n                  },\n                  \"keyword\": \"Given \",\n                  \"keywordType\": \"Context\",\n                  \"text\": \"como usuario ParaBank deseo abrir la aplicacion web\"\n                },\n                {\n                  \"id\": \"83fc7965-7a21-45d0-a45d-5c246b9afb90\",\n                  \"location\": {\n                    \"line\": 6,\n                    \"column\": 5\n                  },\n                  \"keyword\": \"When \",\n                  \"keywordType\": \"Action\",\n                  \"text\": \"ingreso las credenciales de usuario\",\n                  \"dataTable\": {\n                    \"location\": {\n                      \"line\": 7,\n                      \"column\": 5\n                    },\n                    \"rows\": [\n                      {\n                        \"id\": \"cd100038-cb73-4a10-a9d7-631ccccffdb7\",\n                        \"location\": {\n                          \"line\": 7,\n                          \"column\": 5\n                        },\n                        \"cells\": [\n                          {\n                            \"location\": {\n                              \"line\": 7,\n                              \"column\": 6\n                            },\n                            \"value\": \"user\"\n                          },\n                          {\n                            \"location\": {\n                              \"line\": 7,\n                              \"column\": 11\n                            },\n                            \"value\": \"password\"\n                          }\n                        ]\n                      },\n                      {\n                        \"id\": \"beb42493-3b92-4c5c-bb1b-94db0173cbb2\",\n                        \"location\": {\n                          \"line\": 8,\n                          \"column\": 5\n                        },\n                        \"cells\": [\n                          {\n                            \"location\": {\n                              \"line\": 8,\n                              \"column\": 7\n                            },\n                            \"value\": \"hcamargo1\"\n                          },\n                          {\n                            \"location\": {\n                              \"line\": 8,\n                              \"column\": 24\n                            },\n                            \"value\": \"hcamargo1\"\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                },\n                {\n                  \"id\": \"5a244713-6dea-410a-a166-f947c73f08b4\",\n                  \"location\": {\n                    \"line\": 9,\n                    \"column\": 5\n                  },\n                  \"keyword\": \"Then \",\n                  \"keywordType\": \"Outcome\",\n                  \"text\": \"me encuentro logueado correctamente en la aplicacion\"\n                }\n              ],\n              \"examples\": []\n            }\n          }\n        ]\n      },\n      \"comments\": [],\n      \"uri\": \"cypress/e2e/features/login.feature\"\n    }\n  }\n]",
              "code": "var _a3, _b2, _c2, _d, _e3;\n(0, assertions_1.assert)(context.includedPickles[0].id === pickle.id, \"Included pickle stack is unsynchronized\");\nconst { remainingSteps, testCaseStartedId } = retrieveInternalSpecProperties();\ntaskTestCaseStarted(context, {\n  id: testCaseStartedId,\n  testCaseId,\n  attempt: attempt++,\n  timestamp: (0, messages_1.createTimestamp)()\n});\nwindow.testState = {\n  gherkinDocument,\n  pickles,\n  pickle\n};\nconst onAfterStep = (options) => {\n  var _a4, _b3, _c3;\n  const { testStepId, start, result } = options;\n  const end = (0, messages_1.createTimestamp)();\n  if (result === \"pending\" || result === \"skipped\") {\n    if (result === \"pending\") {\n      taskTestStepFinished(context, {\n        testStepId,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.PENDING,\n          duration: (0, messages_1.duration)(start, end)\n        },\n        timestamp: end\n      });\n    } else {\n      taskTestStepFinished(context, {\n        testStepId,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.SKIPPED,\n          duration: (0, messages_1.duration)(start, end)\n        },\n        timestamp: end\n      });\n    }\n    remainingSteps.shift();\n    for (const skippedStep of remainingSteps) {\n      const hookIdOrPickleStepId = (0, assertions_1.assertAndReturn)((_b3 = (_a4 = skippedStep.hook) === null || _a4 === void 0 ? void 0 : _a4.id) !== null && _b3 !== void 0 ? _b3 : (_c3 = skippedStep.pickleStep) === null || _c3 === void 0 ? void 0 : _c3.id, \"Expected a step to either be a hook or a pickleStep\");\n      const testStepId2 = getTestStepId({\n        context,\n        pickleId: pickle.id,\n        hookIdOrPickleStepId\n      });\n      taskTestStepStarted(context, {\n        testStepId: testStepId2,\n        testCaseStartedId,\n        timestamp: (0, messages_1.createTimestamp)()\n      });\n      taskTestStepFinished(context, {\n        testStepId: testStepId2,\n        testCaseStartedId,\n        testStepResult: {\n          status: messages_enums_1.TestStepResultStatus.SKIPPED,\n          duration: {\n            seconds: 0,\n            nanos: 0\n          }\n        },\n        timestamp: (0, messages_1.createTimestamp)()\n      });\n    }\n    for (let i2 = 0, count = remainingSteps.length; i2 < count; i2++) {\n      remainingSteps.pop();\n    }\n    cy.then(() => this.skip());\n  } else {\n    taskTestStepFinished(context, {\n      testStepId,\n      testCaseStartedId,\n      testStepResult: {\n        status: messages_enums_1.TestStepResultStatus.PASSED,\n        duration: (0, messages_1.duration)(start, end)\n      },\n      timestamp: end\n    });\n    remainingSteps.shift();\n  }\n};\nfor (const step of steps) {\n  if (step.hook) {\n    const hook = step.hook;\n    const testStepId = getTestStepId({\n      context,\n      pickleId: pickle.id,\n      hookIdOrPickleStepId: hook.id\n    });\n    cy.then(() => {\n      delete window.testState.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStepStartedAt = start;\n      taskTestStepStarted(context, {\n        testStepId,\n        testCaseStartedId,\n        timestamp: start\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const options = {\n        pickle,\n        gherkinDocument,\n        testCaseStartedId\n      };\n      return (0, cypress_1.runStepWithLogGroup)({\n        fn: dryRun ? noopFn : () => registry2.runCaseHook(this, hook, options),\n        keyword: hook.keyword,\n        text: createStepDescription(hook)\n      }).then((result) => {\n        return { start, result };\n      });\n    }).then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n  } else if (step.pickleStep) {\n    const pickleStep = step.pickleStep;\n    const testStepId = getTestStepId({\n      context,\n      pickleId: pickle.id,\n      hookIdOrPickleStepId: pickleStep.id\n    });\n    const text = (0, assertions_1.assertAndReturn)(pickleStep.text, \"Expected pickle step to have a text\");\n    const scenarioStep = (0, assertions_1.assertAndReturn)(context.astIdsMap.get((0, assertions_1.assertAndReturn)((_a3 = pickleStep.astNodeIds) === null || _a3 === void 0 ? void 0 : _a3[0], \"Expected to find at least one astNodeId\")), `Expected to find scenario step associated with id = ${(_b2 = pickleStep.astNodeIds) === null || _b2 === void 0 ? void 0 : _b2[0]}`);\n    const argument = ((_c2 = pickleStep.argument) === null || _c2 === void 0 ? void 0 : _c2.dataTable) ? new data_table_1.default(pickleStep.argument.dataTable) : ((_e3 = (_d = pickleStep.argument) === null || _d === void 0 ? void 0 : _d.docString) === null || _e3 === void 0 ? void 0 : _e3.content) ? pickleStep.argument.docString.content : void 0;\n    cy.then(() => {\n      window.testState.pickleStep = step.pickleStep;\n      const start = (0, messages_1.createTimestamp)();\n      internalProperties.currentStep = { pickleStep };\n      internalProperties.currentStepStartedAt = start;\n      taskTestStepStarted(context, {\n        testStepId,\n        testCaseStartedId,\n        timestamp: start\n      });\n      return cy.wrap(start, { log: false });\n    }).then((start) => {\n      const beforeStepHooks = registry2.resolveBeforeStepHooks(tags);\n      const afterStepHooks = registry2.resolveAfterStepHooks(tags);\n      const options = {\n        pickle,\n        pickleStep,\n        gherkinDocument,\n        testCaseStartedId,\n        testStepId\n      };\n      const beforeHooksChain = beforeStepHooks.reduce((chain, beforeStepHook) => {\n        return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n          keyword: \"BeforeStep\",\n          text: createStepDescription(beforeStepHook),\n          fn: dryRun ? noopFn : () => registry2.runStepHook(this, beforeStepHook, options)\n        }));\n      }, cy.wrap({}, { log: false }));\n      return beforeHooksChain.then(() => {\n        try {\n          return (0, cypress_1.runStepWithLogGroup)({\n            keyword: (0, assertions_1.assertAndReturn)(\"keyword\" in scenarioStep && scenarioStep.keyword, \"Expected to find a keyword in the scenario step\"),\n            argument,\n            text,\n            fn: () => registry2.runStepDefinition(this, text, dryRun, argument)\n          }).then((result) => {\n            return afterStepHooks.reduce((chain, afterStepHook) => {\n              return chain.then(() => (0, cypress_1.runStepWithLogGroup)({\n                keyword: \"AfterStep\",\n                text: createStepDescription(afterStepHook),\n                fn: dryRun ? noopFn : () => registry2.runStepHook(this, afterStepHook, options)\n              }));\n            }, cy.wrap({}, { log: false })).then(() => {\n              return { start, result };\n            });\n          });\n        } catch (e2) {\n          if (e2 instanceof registry_1.MissingDefinitionError) {\n            throw new Error(createMissingStepDefinitionMessage(context, pickleStep, context.registry.parameterTypeRegistry));\n          } else {\n            throw e2;\n          }\n        }\n      });\n    }).then(({ start, result }) => onAfterStep({ start, result, testStepId }));\n  }\n}",
              "err": {},
              "uuid": "730bdd3e-3c5f-448d-8006-694bbe721dc7",
              "parentUUID": "70439c31-d5b8-4309-9a4a-dc0a067414d9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "730bdd3e-3c5f-448d-8006-694bbe721dc7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3408,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": false,
        "html": false,
        "json": true,
        "reportDir": "cypress/reports/html/.jsons"
      },
      "version": "6.2.0"
    }
  }
}